~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganTestComponent.java
package test;

import com.yandex.yatagan.AutoBuilder;
import com.yandex.yatagan.Lazy;
import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.ThreadAssertions;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.AssertionError;
import java.lang.Class;
import java.lang.Object;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems", "deprecation"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganTestComponent implements TestComponent {
  private Object mClassAInstance;

  private Object mClassBInstance;

  private Object mClassCInstance;

  private YataganTestComponent() {
  }

  @Override
  public List<Create> bootstrap() {
    return this.accessListCreate();
  }

  @Override
  public Provider<List<Create>> bootstrapLater() {
    return new ProviderImpl(this, 0);
  }

  @Override
  public Consumer getC() {
    return new Consumer(this.accessListCreate(), new ProviderImpl(this, 0));
  }

  @Override
  public ConsumerJava getC2() {
    return new ConsumerJava(this.accessListCreate(), new ProviderImpl(this, 0));
  }

  Object switch$$access(int slot) {
    switch(slot) {
      case 0: return this.accessListCreate();
      default: throw new AssertionError();
    }
  }

  ClassA cacheClassA() {
    Object local = this.mClassAInstance;
    if (local == null) {
      ThreadAssertions.assertThreadAccess();
      local = new ClassA(this.cacheClassB());
      this.mClassAInstance = local;
    }
    return (ClassA) local;
  }

  ClassB cacheClassB() {
    Object local = this.mClassBInstance;
    if (local == null) {
      ThreadAssertions.assertThreadAccess();
      local = new ClassB();
      this.mClassBInstance = local;
    }
    return (ClassB) local;
  }

  ClassC cacheClassC() {
    Object local = this.mClassCInstance;
    if (local == null) {
      ThreadAssertions.assertThreadAccess();
      local = new ClassC(this.cacheClassA());
      this.mClassCInstance = local;
    }
    return (ClassC) local;
  }

  List<Create> accessListCreate() {
    return this.manyOfListCreate();
  }

  List<Create> manyOfListCreate() {
    final List<Create> c = new ArrayList<>(3);
    c.add(this.cacheClassB());
    c.add(this.cacheClassA());
    c.add(this.cacheClassC());
    return c;
  }

  public static AutoBuilder<YataganTestComponent> autoBuilder() {
    return new AutoBuilderImpl();
  }

  static final class ProviderImpl implements Lazy {
    private final YataganTestComponent mDelegate;

    private final int mIndex;

    ProviderImpl(YataganTestComponent delegate, int index) {
      this.mDelegate = delegate;
      this.mIndex = index;
    }

    @Override
    public Object get() {
      return this.mDelegate.switch$$access(this.mIndex);
    }
  }

  private static final class AutoBuilderImpl implements AutoBuilder<YataganTestComponent> {
    @Override
    public final <I> AutoBuilder<YataganTestComponent> provideInput(I input, Class<I> inputClass) {
      Checks.reportUnexpectedAutoBuilderInput(input.getClass(), Collections.emptyList());
      return this;
    }

    @Override
    public final YataganTestComponent create() {
      return new YataganTestComponent();
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
