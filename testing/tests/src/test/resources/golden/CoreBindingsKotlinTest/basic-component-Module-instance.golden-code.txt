~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganTestComponent.java
package test;

import com.yandex.yatagan.Lazy;
import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.AssertionError;
import java.lang.Object;
import java.lang.Override;
import java.lang.SuppressWarnings;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems", "deprecation"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganTestComponent implements TestComponent {
  final MyModule mMyModule;

  YataganTestComponent(MyModule pModule) {
    this.mMyModule = Checks.checkInputNotNull(pModule);
  }

  @Override
  public Api get() {
    return Checks.checkProvisionNotNull(this.mMyModule.provides());
  }

  @Override
  public Lazy<Api> getLazy() {
    return new CachingProviderImpl(this, 0);
  }

  @Override
  public Provider<Api> getProvider() {
    return new ProviderImpl(this, 0);
  }

  Object switch$$access(int slot) {
    switch(slot) {
      case 0: return Checks.checkProvisionNotNull(this.mMyModule.provides());
      default: throw new AssertionError();
    }
  }

  public static TestComponent.Factory builder() {
    return new ComponentFactoryImpl();
  }

  static final class ProviderImpl implements Lazy {
    private final YataganTestComponent mDelegate;

    private final int mIndex;

    ProviderImpl(YataganTestComponent delegate, int index) {
      this.mDelegate = delegate;
      this.mIndex = index;
    }

    @Override
    public Object get() {
      return this.mDelegate.switch$$access(this.mIndex);
    }
  }

  private static final class CachingProviderImpl implements Lazy {
    private final YataganTestComponent mDelegate;

    private final int mIndex;

    private Object mValue;

    CachingProviderImpl(YataganTestComponent factory, int index) {
      mDelegate = factory;
      mIndex = index;
    }

    @Override
    public Object get() {
      Object local = mValue;
      if (local == null) {
        ThreadAssertions.assertThreadAccess();
        local = mDelegate.switch$$access(mIndex);
        mValue = local;
      }
      return local;
    }
  }

  private static final class ComponentFactoryImpl implements TestComponent.Factory {
    @Override
    public TestComponent create(MyModule module) {
      return new YataganTestComponent(module);
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
