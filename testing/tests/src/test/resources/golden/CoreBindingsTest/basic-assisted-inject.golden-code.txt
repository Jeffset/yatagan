~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganTestComponent.java
package test;

import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.ThreadAssertions;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import javax.annotation.processing.Generated;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganTestComponent implements TestComponent {
  private Object mScopedDepInstance;

  final String mString;

  YataganTestComponent(String pString) {
    this.mString = Checks.checkInputNotNull(pString);
  }

  @Override
  public FooFactory fooFactory() {
    return this.new FooFactoryImpl();
  }

  ScopedDep cacheScopedDep() {
    Object local = this.mScopedDepInstance;
    if (local == null) {
      ThreadAssertions.assertThreadAccess();
      local = new ScopedDep();
      this.mScopedDepInstance = local;
    }
    return (ScopedDep) local;
  }

  public static TestComponent.Factory builder() {
    return new ComponentFactoryImpl();
  }

  static final class SubComponentImpl implements SubComponent {
    final YataganTestComponent mTestComponent;

    SubComponentImpl(YataganTestComponent pTestComponent) {
      this.mTestComponent = pTestComponent;
    }

    @Override
    public FooFactory fooFactory() {
      return this.mTestComponent.new FooFactoryImpl();
    }

    private static final class ComponentFactoryImpl implements SubComponent.Builder {
      YataganTestComponent fTestComponent;

      ComponentFactoryImpl(YataganTestComponent fTestComponent) {
        this.fTestComponent = fTestComponent;
      }

      @Override
      public SubComponent create() {
        return new SubComponentImpl(this.fTestComponent);
      }
    }
  }

  private final class FooFactoryImpl implements FooFactory {
    @Override
    public Foo createFoo(int count1, int count2, String value) {
      return new Foo(YataganTestComponent.this.cacheScopedDep(), new UnscopedDep(), YataganTestComponent.this.mString, count2, YataganTestComponent.this.new BarFactoryImpl(), count1, value);
    }
  }

  private final class BarFactoryImpl implements BarFactory {
    @Override
    public Bar buildBar(int count2, int count1, String value) {
      return new Bar(count1, count2, value);
    }
  }

  private static final class ComponentFactoryImpl implements TestComponent.Factory {
    @Override
    public TestComponent create(String string) {
      return new YataganTestComponent(string);
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
