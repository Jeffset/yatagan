~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganRootComponent.java
package test;

import com.yandex.yatagan.Lazy;
import com.yandex.yatagan.Optional;
import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.ThreadAssertions;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.AssertionError;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.SuppressWarnings;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganRootComponent implements RootComponent {
  private Object mFooInstance;

  final Features mFeatures;

  YataganRootComponent(Features pFeatures) {
    this.mFeatures = Checks.checkInputNotNull(pFeatures);
  }

  @Override
  public SubComponent1.Builder getSub1() {
    return new SubComponent1Impl.ComponentFactoryImpl(this);
  }

  @Override
  public SubComponent3 createSubComponent3(MyDep dep, MyModule mod, double d) {
    return new SubComponent3Impl(this, dep, mod, d);
  }

  @Override
  public SubComponent2 getSub2() {
    return new SubComponent2Impl(this);
  }

  Object switch$$access(int slot) {
    switch(slot) {
      case 0: return this.cacheFoo();
      default: throw new AssertionError();
    }
  }

  Foo cacheFoo() {
    Object local = this.mFooInstance;
    if (local == null) {
      ThreadAssertions.assertThreadAccess();
      local = new Foo();
      this.mFooInstance = local;
    }
    return (Foo) local;
  }

  public static RootComponent.Factory builder() {
    return new ComponentFactoryImpl();
  }

  static final class SubComponent1Impl implements SubComponent1 {
    final YataganRootComponent mRootComponent;

    private byte mFeaturesIsEnabled;

    SubComponent1Impl(YataganRootComponent pRootComponent) {
      this.mRootComponent = pRootComponent;
    }

    @Override
    public Optional<FeatureComponent.Factory> getOpt() {
      return this.optOfFeatureComponentFactory();
    }

    Optional optOfFeatureComponentFactory() {
      return this.featuresIsEnabled() ? Optional.of(new FeatureComponentImpl.ComponentFactoryImpl(this.mRootComponent)) : Optional.empty();
    }

    boolean featuresIsEnabled() {
      if (this.mFeaturesIsEnabled == 0x0) {
        this.mFeaturesIsEnabled = (byte) ((this.mRootComponent.mFeatures.isEnabled()) ? 0x1 : 0x2);
      }
      return this.mFeaturesIsEnabled == 0x1;
    }

    static final class FeatureComponentImpl implements FeatureComponent {
      final YataganRootComponent mRootComponent;

      FeatureComponentImpl(YataganRootComponent pRootComponent) {
        this.mRootComponent = pRootComponent;
      }

      @Override
      public Provider<Foo> getFoo() {
        return new ProviderImpl(this.mRootComponent, 0);
      }

      @Override
      public FeatureComponent2 createFeatureComponent2(MyDep dep) {
        return new FeatureComponent2Impl(dep);
      }

      static final class FeatureComponent2Impl implements FeatureComponent2 {
        final MyDep mMyDep;

        FeatureComponent2Impl(MyDep pDep) {
          this.mMyDep = Checks.checkInputNotNull(pDep);
        }

        @Override
        public MyDep getDep() {
          return this.mMyDep;
        }
      }

      private static final class ComponentFactoryImpl implements FeatureComponent.Factory {
        YataganRootComponent fRootComponent;

        ComponentFactoryImpl(YataganRootComponent fRootComponent) {
          this.fRootComponent = fRootComponent;
        }

        @Override
        public FeatureComponent create() {
          return new FeatureComponentImpl(this.fRootComponent);
        }
      }
    }

    private static final class ComponentFactoryImpl implements SubComponent1.Builder {
      YataganRootComponent fRootComponent;

      ComponentFactoryImpl(YataganRootComponent fRootComponent) {
        this.fRootComponent = fRootComponent;
      }

      @Override
      public SubComponent1 create() {
        return new SubComponent1Impl(this.fRootComponent);
      }
    }
  }

  static final class SubComponent3Impl implements SubComponent3 {
    final Double mD;

    final MyDep mMyDep;

    final MyModule mMyModule;

    final YataganRootComponent mRootComponent;

    SubComponent3Impl(YataganRootComponent pRootComponent, MyDep pDep, MyModule pMod, Double pD) {
      this.mRootComponent = pRootComponent;
      this.mMyDep = Checks.checkInputNotNull(pDep);
      this.mMyModule = Checks.checkInputNotNull(pMod);
      this.mD = Checks.checkInputNotNull(pD);
    }

    @Override
    public MyDep getD() {
      return this.mMyDep;
    }

    @Override
    public double getD2() {
      return this.mD;
    }

    @Override
    public Foo getFoo() {
      return this.mRootComponent.cacheFoo();
    }

    @Override
    public int getI() {
      return Checks.checkProvisionNotNull(this.mMyModule.getI());
    }

    @Override
    public SubComponent4 getSub4() {
      return new SubComponent4Impl();
    }

    static final class SubComponent4Impl implements SubComponent4 {
      final MyImplicitModule mMyImplicitModule;

      SubComponent4Impl() {
        this.mMyImplicitModule = new MyImplicitModule();
      }

      @Override
      public long getI() {
        return Checks.checkProvisionNotNull(this.mMyImplicitModule.getI());
      }
    }
  }

  static final class SubComponent2Impl implements SubComponent2 {
    final YataganRootComponent mRootComponent;

    SubComponent2Impl(YataganRootComponent pRootComponent) {
      this.mRootComponent = pRootComponent;
    }

    @Override
    public Foo getFoo() {
      return this.mRootComponent.cacheFoo();
    }

    @Override
    public Sub2Component getSub2() {
      return new Sub2ComponentImpl(this.mRootComponent);
    }

    static final class Sub2ComponentImpl implements Sub2Component {
      final YataganRootComponent mRootComponent;

      private byte mFeaturesIsEnabled;

      Sub2ComponentImpl(YataganRootComponent pRootComponent) {
        this.mRootComponent = pRootComponent;
      }

      @Override
      public Foo getFoo() {
        return this.mRootComponent.cacheFoo();
      }

      @Override
      public Optional<FeatureComponent.Factory> getOpt() {
        return this.optOfFeatureComponentFactory();
      }

      Optional optOfFeatureComponentFactory() {
        return this.featuresIsEnabled() ? Optional.of(new FeatureComponentImpl.ComponentFactoryImpl(this.mRootComponent)) : Optional.empty();
      }

      boolean featuresIsEnabled() {
        if (this.mFeaturesIsEnabled == 0x0) {
          this.mFeaturesIsEnabled = (byte) ((this.mRootComponent.mFeatures.isEnabled()) ? 0x1 : 0x2);
        }
        return this.mFeaturesIsEnabled == 0x1;
      }

      static final class FeatureComponentImpl implements FeatureComponent {
        final YataganRootComponent mRootComponent;

        FeatureComponentImpl(YataganRootComponent pRootComponent) {
          this.mRootComponent = pRootComponent;
        }

        @Override
        public Provider<Foo> getFoo() {
          return new ProviderImpl(this.mRootComponent, 0);
        }

        @Override
        public FeatureComponent2 createFeatureComponent2(MyDep dep) {
          return new FeatureComponent2Impl(dep);
        }

        static final class FeatureComponent2Impl implements FeatureComponent2 {
          final MyDep mMyDep;

          FeatureComponent2Impl(MyDep pDep) {
            this.mMyDep = Checks.checkInputNotNull(pDep);
          }

          @Override
          public MyDep getDep() {
            return this.mMyDep;
          }
        }

        private static final class ComponentFactoryImpl implements FeatureComponent.Factory {
          YataganRootComponent fRootComponent;

          ComponentFactoryImpl(YataganRootComponent fRootComponent) {
            this.fRootComponent = fRootComponent;
          }

          @Override
          public FeatureComponent create() {
            return new FeatureComponentImpl(this.fRootComponent);
          }
        }
      }
    }
  }

  static final class ProviderImpl implements Lazy {
    private final YataganRootComponent mDelegate;

    private final int mIndex;

    ProviderImpl(YataganRootComponent delegate, int index) {
      this.mDelegate = delegate;
      this.mIndex = index;
    }

    @Override
    public Object get() {
      return this.mDelegate.switch$$access(this.mIndex);
    }
  }

  private static final class ComponentFactoryImpl implements RootComponent.Factory {
    @Override
    public RootComponent create(Features features) {
      return new YataganRootComponent(features);
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
