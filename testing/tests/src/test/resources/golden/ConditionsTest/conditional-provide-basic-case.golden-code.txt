~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganTestMainComponent.java
package test;

import com.yandex.yatagan.AutoBuilder;
import com.yandex.yatagan.Lazy;
import com.yandex.yatagan.Optional;
import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.ThreadAssertions;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.AssertionError;
import java.lang.Class;
import java.lang.Object;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Collections;
import javax.annotation.processing.Generated;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganTestMainComponent implements TestMainComponent {
  final boolean mFeaturesFooBar = Features.fooBar();

  private YataganTestMainComponent() {
  }

  @Override
  public Optional<Api> getApi() {
    return this.optOfApi();
  }

  @Override
  public Optional<Lazy<Api>> getApiLazy() {
    return this.optOfTestApi();
  }

  @Override
  public Optional<Api> getNamedApi() {
    return this.optOfJavaxInjectNamedValueApi();
  }

  Object switch$$access(int slot) {
    switch(slot) {
      case 0: return Checks.checkProvisionNotNull(MyModule.INSTANCE.provideApi());
      default: throw new AssertionError();
    }
  }

  Optional optOfApi() {
    return this.mFeaturesFooBar ? Optional.of(Checks.checkProvisionNotNull(MyModule.INSTANCE.provideApi())) : Optional.empty();
  }

  Optional optOfTestApi() {
    return this.mFeaturesFooBar ? Optional.of(new CachingProviderImpl(this, 0)) : Optional.empty();
  }

  Optional optOfJavaxInjectNamedValueApi() {
    return Optional.of(Checks.checkProvisionNotNull(MyModule.INSTANCE.provideNamedApi()));
  }

  public static AutoBuilder<YataganTestMainComponent> autoBuilder() {
    return new AutoBuilderImpl();
  }

  private static final class CachingProviderImpl implements Lazy {
    private final YataganTestMainComponent mDelegate;

    private final int mIndex;

    private Object mValue;

    CachingProviderImpl(YataganTestMainComponent factory, int index) {
      mDelegate = factory;
      mIndex = index;
    }

    @Override
    public Object get() {
      Object local = mValue;
      if (local == null) {
        ThreadAssertions.assertThreadAccess();
        local = mDelegate.switch$$access(mIndex);
        mValue = local;
      }
      return local;
    }
  }

  private static final class AutoBuilderImpl implements AutoBuilder<YataganTestMainComponent> {
    @Override
    public final <I> AutoBuilder<YataganTestMainComponent> provideInput(I input,
        Class<I> inputClass) {
      Checks.reportUnexpectedAutoBuilderInput(input.getClass(), Collections.emptyList());
      return this;
    }

    @Override
    public final YataganTestMainComponent create() {
      return new YataganTestMainComponent();
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganTestCustomComponent.java
package test;

import com.yandex.yatagan.AutoBuilder;
import com.yandex.yatagan.Lazy;
import com.yandex.yatagan.Optional;
import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.ThreadAssertions;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.AssertionError;
import java.lang.Class;
import java.lang.Object;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Collections;
import javax.annotation.processing.Generated;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganTestCustomComponent implements TestCustomComponent {
  final boolean mFeaturesIsEnabledB = Features.isEnabledB();

  private YataganTestCustomComponent() {
  }

  @Override
  public Optional<Api> getApi() {
    return this.optOfApi();
  }

  @Override
  public Optional<Lazy<Api>> getApiLazy() {
    return this.optOfTestApi();
  }

  @Override
  public Optional<Api> getNamedApi() {
    return Optional.empty();
  }

  Object switch$$access(int slot) {
    switch(slot) {
      case 0: return Checks.checkProvisionNotNull(MyModule.INSTANCE.provideApi());
      default: throw new AssertionError();
    }
  }

  Optional optOfApi() {
    return this.mFeaturesIsEnabledB ? Optional.of(Checks.checkProvisionNotNull(MyModule.INSTANCE.provideApi())) : Optional.empty();
  }

  Optional optOfTestApi() {
    return this.mFeaturesIsEnabledB ? Optional.of(new CachingProviderImpl(this, 0)) : Optional.empty();
  }

  public static AutoBuilder<YataganTestCustomComponent> autoBuilder() {
    return new AutoBuilderImpl();
  }

  private static final class CachingProviderImpl implements Lazy {
    private final YataganTestCustomComponent mDelegate;

    private final int mIndex;

    private Object mValue;

    CachingProviderImpl(YataganTestCustomComponent factory, int index) {
      mDelegate = factory;
      mIndex = index;
    }

    @Override
    public Object get() {
      Object local = mValue;
      if (local == null) {
        ThreadAssertions.assertThreadAccess();
        local = mDelegate.switch$$access(mIndex);
        mValue = local;
      }
      return local;
    }
  }

  private static final class AutoBuilderImpl implements AutoBuilder<YataganTestCustomComponent> {
    @Override
    public final <I> AutoBuilder<YataganTestCustomComponent> provideInput(I input,
        Class<I> inputClass) {
      Checks.reportUnexpectedAutoBuilderInput(input.getClass(), Collections.emptyList());
      return this;
    }

    @Override
    public final YataganTestCustomComponent create() {
      return new YataganTestCustomComponent();
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
