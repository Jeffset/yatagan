~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganTestComponent.java
package test;

import com.yandex.yatagan.AutoBuilder;
import com.yandex.yatagan.Optional;
import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.Class;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Collections;
import javax.annotation.processing.Generated;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganTestComponent implements TestComponent {
  final boolean mFeaturesFooBar = Features.fooBar();

  private YataganTestComponent() {
  }

  @Override
  public Optional<ClassA> getA() {
    return this.optOfClassA();
  }

  @Override
  public TestSubComponent.Factory getSub() {
    return new TestSubComponentImpl.ComponentFactoryImpl(this);
  }

  Optional optOfClassA() {
    return this.mFeaturesFooBar ? Optional.of(new ClassA()) : Optional.empty();
  }

  public static AutoBuilder<YataganTestComponent> autoBuilder() {
    return new AutoBuilderImpl();
  }

  static final class TestSubComponentImpl implements TestSubComponent {
    final YataganTestComponent mTestComponent;

    final boolean mFeaturesIsEnabledB = Features.isEnabledB();

    TestSubComponentImpl(YataganTestComponent pTestComponent) {
      this.mTestComponent = pTestComponent;
    }

    @Override
    public Optional<ClassB> getB() {
      return this.optOfClassB();
    }

    Optional optOfClassA() {
      return this.mTestComponent.mFeaturesFooBar ? Optional.of(new ClassA()) : Optional.empty();
    }

    Optional optOfClassB() {
      return this.mFeaturesIsEnabledB ? Optional.of(new ClassB(this.optOfClassA())) : Optional.empty();
    }

    private static final class ComponentFactoryImpl implements TestSubComponent.Factory {
      YataganTestComponent fTestComponent;

      ComponentFactoryImpl(YataganTestComponent fTestComponent) {
        this.fTestComponent = fTestComponent;
      }

      @Override
      public TestSubComponent create() {
        return new TestSubComponentImpl(this.fTestComponent);
      }
    }
  }

  private static final class AutoBuilderImpl implements AutoBuilder<YataganTestComponent> {
    @Override
    public final <I> AutoBuilder<YataganTestComponent> provideInput(I input, Class<I> inputClass) {
      Checks.reportUnexpectedAutoBuilderInput(input.getClass(), Collections.emptyList());
      return this;
    }

    @Override
    public final YataganTestComponent create() {
      return new YataganTestComponent();
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
