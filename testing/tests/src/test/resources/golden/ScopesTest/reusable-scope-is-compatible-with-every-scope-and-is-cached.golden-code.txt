~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganComponentA.java
package test;

import com.yandex.yatagan.AutoBuilder;
import com.yandex.yatagan.Lazy;
import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.AssertionError;
import java.lang.Class;
import java.lang.Object;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Collections;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems", "deprecation"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganComponentA implements ComponentA {
  private Object mMyClassInstance;

  private YataganComponentA() {
  }

  @Override
  public Provider<MyClass> getMy() {
    return new ProviderImpl(this, 0);
  }

  Object switch$$access(int slot) {
    switch(slot) {
      case 0: return this.cacheMyClass();
      default: throw new AssertionError();
    }
  }

  MyClass cacheMyClass() {
    Object local = this.mMyClassInstance;
    if (local == null) {
      ThreadAssertions.assertThreadAccess();
      local = new MyClass();
      this.mMyClassInstance = local;
    }
    return (MyClass) local;
  }

  public static AutoBuilder<YataganComponentA> autoBuilder() {
    return new AutoBuilderImpl();
  }

  static final class ProviderImpl implements Lazy {
    private final YataganComponentA mDelegate;

    private final int mIndex;

    ProviderImpl(YataganComponentA delegate, int index) {
      this.mDelegate = delegate;
      this.mIndex = index;
    }

    @Override
    public Object get() {
      return this.mDelegate.switch$$access(this.mIndex);
    }
  }

  private static final class AutoBuilderImpl implements AutoBuilder<YataganComponentA> {
    @Override
    public final <I> AutoBuilder<YataganComponentA> provideInput(I input, Class<I> inputClass) {
      Checks.reportUnexpectedAutoBuilderInput(input.getClass(), Collections.emptyList());
      return this;
    }

    @Override
    public final YataganComponentA create() {
      return new YataganComponentA();
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganComponentB.java
package test;

import com.yandex.yatagan.AutoBuilder;
import com.yandex.yatagan.Lazy;
import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.AssertionError;
import java.lang.Class;
import java.lang.Object;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Collections;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems", "deprecation"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganComponentB implements ComponentB {
  private Object mObjectInstance;

  private Object mMyClassInstance;

  private YataganComponentB() {
  }

  @Override
  public Provider<Object> getAny() {
    return new ProviderImpl(this, 0);
  }

  @Override
  public Provider<MyClass> getMy() {
    return new ProviderImpl(this, 1);
  }

  @Override
  public Subcomponent.Builder getSub() {
    return new SubcomponentImpl.ComponentFactoryImpl(this);
  }

  Object switch$$access(int slot) {
    switch(slot) {
      case 0: return this.cacheObject();
      case 1: return this.cacheMyClass();
      default: throw new AssertionError();
    }
  }

  Object cacheObject() {
    Object local = this.mObjectInstance;
    if (local == null) {
      ThreadAssertions.assertThreadAccess();
      local = Checks.checkProvisionNotNull(MyModule.INSTANCE.provide());
      this.mObjectInstance = local;
    }
    return (Object) local;
  }

  MyClass cacheMyClass() {
    Object local = this.mMyClassInstance;
    if (local == null) {
      ThreadAssertions.assertThreadAccess();
      local = new MyClass();
      this.mMyClassInstance = local;
    }
    return (MyClass) local;
  }

  public static AutoBuilder<YataganComponentB> autoBuilder() {
    return new AutoBuilderImpl();
  }

  static final class SubcomponentImpl implements Subcomponent {
    final YataganComponentB mComponentB;

    SubcomponentImpl(YataganComponentB pComponentB) {
      this.mComponentB = pComponentB;
    }

    @Override
    public Object getAny() {
      return this.mComponentB.cacheObject();
    }

    private static final class ComponentFactoryImpl implements Subcomponent.Builder {
      YataganComponentB fComponentB;

      ComponentFactoryImpl(YataganComponentB fComponentB) {
        this.fComponentB = fComponentB;
      }

      @Override
      public Subcomponent create() {
        return new SubcomponentImpl(this.fComponentB);
      }
    }
  }

  static final class ProviderImpl implements Lazy {
    private final YataganComponentB mDelegate;

    private final int mIndex;

    ProviderImpl(YataganComponentB delegate, int index) {
      this.mDelegate = delegate;
      this.mIndex = index;
    }

    @Override
    public Object get() {
      return this.mDelegate.switch$$access(this.mIndex);
    }
  }

  private static final class AutoBuilderImpl implements AutoBuilder<YataganComponentB> {
    @Override
    public final <I> AutoBuilder<YataganComponentB> provideInput(I input, Class<I> inputClass) {
      Checks.reportUnexpectedAutoBuilderInput(input.getClass(), Collections.emptyList());
      return this;
    }

    @Override
    public final YataganComponentB create() {
      return new YataganComponentB();
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
