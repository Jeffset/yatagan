error: Missing binding for test.SubComponent1
NOTE: A dependency seems to be a child component, try injecting its factory instead.
Encountered:
  in graph for root-component test.RootComponent
  in entry-point getSub1: test.SubComponent1
                          ^-[*1]------------
  here: [1*] <missing>
             ^~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: Missing binding for test.SubComponent2
NOTE: A dependency seems to be a child component, try injecting its factory instead.
Encountered:
  in graph for root-component test.RootComponent
  in entry-point getSub2: test.SubComponent2
                          ^-[*1]------------
  here: [1*] <missing>
             ^~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: `child component test.FeatureComponent` with a condition:
    (1) [test.Features.isEnabled]
cannot be directly exposed from an entry-point of `graph for root-component test.RootComponent` under condition:
    (2) [always-present]
without Optional<..> wrapper, because component condition (2) does not imply condition (1)
Encountered:
  in graph for root-component test.RootComponent
  here: entry-point getFsub: test.FeatureComponent
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: `component test.SubComponent1` has an explicitly declared `component-creator test.SubComponent1.Builder` so it can't be created directly.
Changing the entry-point type to the `test.SubComponent1.Builder` would fix the problem and allow the component to be recognized as a child (if not included explicitly).
Encountered:
  in graph for root-component test.RootComponent
  here: entry-point getSub1: test.SubComponent1
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: `component test.SubComponent2` has an explicitly declared `component-creator test.SubComponent2.Builder` so it can't be created directly.
Changing the entry-point type to the `test.SubComponent2.Builder` would fix the problem and allow the component to be recognized as a child (if not included explicitly).
Encountered:
  in graph for root-component test.RootComponent
  here: entry-point getSub2: test.SubComponent2
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~