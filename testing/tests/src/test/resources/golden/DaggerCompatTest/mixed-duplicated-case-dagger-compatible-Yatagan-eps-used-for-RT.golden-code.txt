~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/DaggerMyDagger.java
package test;

import com.yandex.yatagan.internal.YataganGenerated;
import javax.annotation.processing.Generated;

@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.DaggerCompatBridgeGenerator")
public final class DaggerMyDagger {
  public static MyDagger create() {
    return Yatagan$MyDagger.autoBuilder().create();
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/DaggerTop_MyDaggerNested.java
package test;

import com.yandex.yatagan.internal.YataganGenerated;
import javax.annotation.processing.Generated;

@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.DaggerCompatBridgeGenerator")
public final class DaggerTop_MyDaggerNested {
  public static Top.MyDaggerNested.Factory builder() {
    return Yatagan$Top$MyDaggerNested.builder();
  }

  public static Top.MyDaggerNested.Factory factory() {
    return builder();
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/Yatagan$MyDagger.java
package test;

import com.yandex.yatagan.AutoBuilder;
import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.ThreadAssertions;
import com.yandex.yatagan.internal.YataganGenerated;
import dagger.Lazy;
import java.lang.AssertionError;
import java.lang.Character;
import java.lang.Class;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class Yatagan$MyDagger implements MyDagger {
  private volatile Object mBarInstance = new UninitializedLock();

  private Object mFooInstance;

  private Yatagan$MyDagger() {
  }

  @Override
  public Lazy<Bar> getBar() {
    return new ProviderImpl(this, 0);
  }

  @Override
  public Foo getFoo() {
    return this.cacheFoo();
  }

  @Override
  public MySub createSub(MyModule mod) {
    return new MySubImpl(mod);
  }

  Object switch$$access(int slot) {
    switch(slot) {
      case 0: return this.cacheBar();
      default: throw new AssertionError();
    }
  }

  Bar cacheBar() {
    Object local = this.mBarInstance;
    if (local instanceof UninitializedLock) {
      synchronized (local) {
        local = this.mBarInstance;
        if (local instanceof UninitializedLock) {
          local = new Bar();
          this.mBarInstance = local;
        }
      }
    }
    return (Bar) local;
  }

  Foo cacheFoo() {
    Object local = this.mFooInstance;
    if (local == null) {
      ThreadAssertions.assertThreadAccess();
      local = new Foo();
      this.mFooInstance = local;
    }
    return (Foo) local;
  }

  public static AutoBuilder<Yatagan$MyDagger> autoBuilder() {
    return new AutoBuilderImpl();
  }

  static final class MySubImpl implements MySub {
    private Object mFooInstance;

    final MyModule mMyModule;

    MySubImpl(MyModule pMod) {
      this.mMyModule = Checks.checkInputNotNull(pMod);
    }

    @Override
    public Provider<Integer> getA() {
      return new ProviderImpl(this, 0);
    }

    @Override
    public Foo getFoo() {
      return this.cacheFoo();
    }

    @Override
    public MySub2.Builder getS() {
      return new MySub2Impl.ComponentFactoryImpl();
    }

    Object switch$$access(int slot) {
      switch(slot) {
        case 0: return Checks.checkProvisionNotNull(this.mMyModule.a());
        default: throw new AssertionError();
      }
    }

    Foo cacheFoo() {
      Object local = this.mFooInstance;
      if (local == null) {
        ThreadAssertions.assertThreadAccess();
        local = new Foo();
        this.mFooInstance = local;
      }
      return (Foo) local;
    }

    static final class MySub2Impl implements MySub2 {
      final Character mSetChar;

      MySub2Impl(Character pSetChar) {
        this.mSetChar = Checks.checkInputNotNull(pSetChar);
      }

      @Override
      public Collection<Integer> getCol() {
        return this.accessJavaxInjectNamedValueListSetInteger();
      }

      @Override
      public char getI() {
        return this.mSetChar;
      }

      @Override
      public Map<Long, String> getMap() {
        return this.mapOfMapLongString();
      }

      @Override
      public Set<Integer> getSet() {
        return this.accessJavaxInjectNamedValueListSetInteger();
      }

      Set<Integer> accessJavaxInjectNamedValueListSetInteger() {
        return this.manyOfSetInteger();
      }

      Set<Integer> manyOfSetInteger() {
        final Set<Integer> c = new HashSet<>(2);
        c.add(Checks.checkProvisionNotNull(SubModule.INSTANCE.intoSet()));
        c.addAll(Checks.checkProvisionNotNull(SubModule.INSTANCE.manyIntoSet()));
        return c;
      }

      Map<Long, String> mapOfMapLongString() {
        final Map<Long, String> map = new HashMap<>(2);
        map.put(123456789000L, Checks.checkProvisionNotNull(SubModule.INSTANCE.map1()));
        map.put(2L, Checks.checkProvisionNotNull(SubModule.INSTANCE.map2()));
        return map;
      }

      private static final class ComponentFactoryImpl implements MySub2.Builder {
        private Character mSetChar;

        ComponentFactoryImpl() {
        }

        @Override
        public MySub2.Builder setChar(char i) {
          this.mSetChar = i;
          return this;
        }

        @Override
        public MySub2 build() {
          return new MySub2Impl(this.mSetChar);
        }
      }
    }

    static final class ProviderImpl implements com.yandex.yatagan.Lazy, Provider, Lazy {
      private final MySubImpl mDelegate;

      private final int mIndex;

      ProviderImpl(MySubImpl delegate, int index) {
        this.mDelegate = delegate;
        this.mIndex = index;
      }

      @Override
      public Object get() {
        return this.mDelegate.switch$$access(this.mIndex);
      }
    }
  }

  private static final class UninitializedLock {
  }

  static final class ProviderImpl implements com.yandex.yatagan.Lazy, Provider, Lazy {
    private final Yatagan$MyDagger mDelegate;

    private final int mIndex;

    ProviderImpl(Yatagan$MyDagger delegate, int index) {
      this.mDelegate = delegate;
      this.mIndex = index;
    }

    @Override
    public Object get() {
      return this.mDelegate.switch$$access(this.mIndex);
    }
  }

  private static final class AutoBuilderImpl implements AutoBuilder<Yatagan$MyDagger> {
    @Override
    public final <I> AutoBuilder<Yatagan$MyDagger> provideInput(I input, Class<I> inputClass) {
      Checks.reportUnexpectedAutoBuilderInput(input.getClass(), Collections.emptyList());
      return this;
    }

    @Override
    public final Yatagan$MyDagger create() {
      return new Yatagan$MyDagger();
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/Yatagan$Top$MyDaggerNested.java
package test;

import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.Integer;
import java.lang.Override;
import java.lang.SuppressWarnings;
import javax.annotation.processing.Generated;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class Yatagan$Top$MyDaggerNested implements Top.MyDaggerNested {
  final Integer mI;

  final MyDep mMyDep;

  Yatagan$Top$MyDaggerNested(Integer pI, MyDep pDep) {
    this.mI = Checks.checkInputNotNull(pI);
    this.mMyDep = Checks.checkInputNotNull(pDep);
  }

  @Override
  public MyAssistedFactory getAf() {
    return this.new MyAssistedFactoryImpl();
  }

  @Override
  public Foo getFoo() {
    return this.mMyDep.getFoo();
  }

  @Override
  public int getI() {
    return this.mI;
  }

  public static Top.MyDaggerNested.Factory builder() {
    return new ComponentFactoryImpl();
  }

  private final class MyAssistedFactoryImpl implements MyAssistedFactory {
    @Override
    public AssistedClass create(int i) {
      return new AssistedClass(i, Yatagan$Top$MyDaggerNested.this.mMyDep.getFoo());
    }
  }

  private static final class ComponentFactoryImpl implements Top.MyDaggerNested.Factory {
    @Override
    public Top.MyDaggerNested create(int i, MyDep dep) {
      return new Yatagan$Top$MyDaggerNested(i, dep);
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
