~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganMyApplicationComponent.java
package test;

import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.Override;
import java.lang.SuppressWarnings;
import javax.annotation.processing.Generated;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems", "deprecation"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganMyApplicationComponent implements MyApplicationComponent {
  YataganMyApplicationComponent() {
  }

  @Override
  public MyApplicationManager getAppManager() {
    return new MyApplicationManagerImpl();
  }

  public static MyApplicationComponent.Factory builder() {
    return new ComponentFactoryImpl();
  }

  private static final class ComponentFactoryImpl implements MyApplicationComponent.Factory {
    @Override
    public MyApplicationComponent create() {
      return new YataganMyApplicationComponent();
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name: test/YataganMyActivityComponent.java
package test;

import com.yandex.yatagan.Lazy;
import com.yandex.yatagan.internal.Checks;
import com.yandex.yatagan.internal.ThreadAssertions;
import com.yandex.yatagan.internal.YataganGenerated;
import java.lang.AssertionError;
import java.lang.Object;
import java.lang.Override;
import java.lang.SuppressWarnings;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@SuppressWarnings({"unchecked", "rawtypes", "NullableProblems", "deprecation"})
@YataganGenerated
@Generated("com.yandex.yatagan.codegen.impl.ComponentGenerator")
public final class YataganMyActivityComponent implements MyActivityComponent {
  final MyApplicationComponent mMyApplicationComponent;

  YataganMyActivityComponent(MyApplicationComponent pApp) {
    this.mMyApplicationComponent = Checks.checkInputNotNull(pApp);
  }

  @Override
  public MyApplicationManager getAppManager() {
    return this.mMyApplicationComponent.getAppManager();
  }

  @Override
  public Lazy<MyApplicationManager> getAppManagerLazy() {
    return new CachingProviderImpl(this, 0);
  }

  @Override
  public Provider<MyApplicationManager> getAppManagerProvider() {
    return new ProviderImpl(this, 0);
  }

  Object switch$$access(int slot) {
    switch(slot) {
      case 0: return this.mMyApplicationComponent.getAppManager();
      default: throw new AssertionError();
    }
  }

  public static MyActivityComponent.Factory builder() {
    return new ComponentFactoryImpl();
  }

  static final class ProviderImpl implements Lazy {
    private final YataganMyActivityComponent mDelegate;

    private final int mIndex;

    ProviderImpl(YataganMyActivityComponent delegate, int index) {
      this.mDelegate = delegate;
      this.mIndex = index;
    }

    @Override
    public Object get() {
      return this.mDelegate.switch$$access(this.mIndex);
    }
  }

  private static final class CachingProviderImpl implements Lazy {
    private final YataganMyActivityComponent mDelegate;

    private final int mIndex;

    private Object mValue;

    CachingProviderImpl(YataganMyActivityComponent factory, int index) {
      mDelegate = factory;
      mIndex = index;
    }

    @Override
    public Object get() {
      Object local = mValue;
      if (local == null) {
        ThreadAssertions.assertThreadAccess();
        local = mDelegate.switch$$access(mIndex);
        mValue = local;
      }
      return local;
    }
  }

  private static final class ComponentFactoryImpl implements MyActivityComponent.Factory {
    @Override
    public MyActivityComponent create(MyApplicationComponent app) {
      return new YataganMyActivityComponent(app);
    }
  }
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
